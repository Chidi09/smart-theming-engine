import os
import json
from datetime import datetime

def build_theme_files(palette_data: dict, font_suggestions: dict, brand_guidelines: dict, output_dir: str) -> dict:
    """
    Builds the final theme files (Tailwind config, CSS variables, Integration Guide)
    based on extracted palette, font suggestions, and brand guidelines.

    Args:
        palette_data (dict): Dictionary from palette_extractor with 'palette',
                             'accessibility_suggestions', 'color_harmony_score'.
        font_suggestions (dict): Dictionary from font_suggester with 'heading_font',
                                 'body_font', 'font_size_scale', 'typographic_recommendations'.
        brand_guidelines (dict): Parsed brand guidelines (can be empty if inferred).
        output_dir (str): Directory to save the generated files.

    Returns:
        dict: Paths to the generated files.
    """
    os.makedirs(output_dir, exist_ok=True)

    # Extract relevant data
    colors = palette_data["palette"]
    heading_font = font_suggestions["heading_font"]
    body_font = font_suggestions["body_font"]
    font_size_scale = font_suggestions["font_size_scale"]
    typographic_recs = font_suggestions.get("typographic_recommendations", {}) # Get new recommendations
    
    # Debug print to check typographic_recs content
    print(f"DEBUG (build_theme_files): typographic_recs = {typographic_recs}")

    # Extract design principles from brand guidelines (explicit or inferred)
    design_principles = set()
    if "designPrinciples" in brand_guidelines and isinstance(brand_guidelines["designPrinciples"], list):
        for principle in brand_guidelines["designPrinciples"]:
            design_principles.add(principle.strip().lower())

    # --- 1. Generate theme.css (CSS Variables) ---
    theme_css_content = f"""
/*
 * Generated by Smart Theming Engine
 * Date: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
 *
 * This file defines CSS variables for your theme, derived from image analysis
 * and brand guidelines.
 *
 * Design Principles Applied: {', '.join(design_principles) if design_principles else 'None (inferred)'}
 */

:root {{
    /* Colors */
    --color-primary: {colors.get('primary', '#1A73E8')};
    --color-secondary: {colors.get('secondary', '#F0F0F0')};
    --color-accent: {colors.get('accent', '#EA4335')};
    --color-text-dark: {colors.get('text_dark', '#333333')};
    --color-text-light: {colors.get('text_light', '#FFFFFF')};
    --color-background-light: {colors.get('background_light', '#F9FAFB')};
    --color-background-dark: {colors.get('background_dark', '#1F2937')};
    --color-surface: {colors.get('surface', '#FFFFFF')}; /* For cards, modals */

    /* Typography */
    --font-heading: '{heading_font}', sans-serif;
    --font-body: '{body_font}', sans-serif;

    /* Font Sizes (Golden Ratio Scale) */
    --font-size-h1: {font_size_scale.get('h1', 48)}px;
    --font-size-h2: {font_size_scale.get('h2', 40)}px;
    --font-size-h3: {font_size_scale.get('h3', 32)}px;
    --font-size-h4: {font_size_scale.get('h4', 26)}px;
    --font-size-h5: {font_size_scale.get('h5', 22)}px;
    --font-size-h6: {font_size_scale.get('h6', 18)}px;
    --font-size-body: {font_size_scale.get('body', 16)}px;
    --font-size-small: {font_size_scale.get('small', 14)}px;
    --font-size-caption: {font_size_scale.get('caption', 12)}px; /* New */
    --font-size-display: {font_size_scale.get('display', 64)}px; /* New */

    /* Typographic Recommendations (Line-height, Letter-spacing) */
    --line-height-heading: var(--lh-{typographic_recs.get('line_height', 'normal')});
    --line-height-body: var(--lh-{typographic_recs.get('line_height', 'normal')});
    --letter-spacing-heading: var(--ls-{typographic_recs.get('letter_spacing', 'normal')});
    --letter-spacing-body: var(--ls-{typographic_recs.get('letter_spacing', 'normal')});

    /* Base Line Heights (conceptual mapping to Tailwind's leading classes) */
    --lh-tight: 1.25; /* leading-tight */
    --lh-normal: 1.5;  /* leading-normal */
    --lh-relaxed: 1.625; /* leading-relaxed */
    --lh-loose: 2; /* leading-loose */

    /* Base Letter Spacing (conceptual mapping to Tailwind's tracking classes) */
    --ls-tight: -0.025em; /* tracking-tight */
    --ls-normal: 0em;    /* tracking-normal */
    --ls-wide: 0.025em;  /* tracking-wide */
    --ls-wider: 0.05em;  /* tracking-wider */
    --ls-widest: 0.1em;  /* tracking-widest */

    /* Spacing Units (Golden Ratio based, from layout_generator) */
    --spacing-xs: {font_suggestions['font_size_scale'].get('small', 14) / 16 * 16}px; /* Re-using small font size as a proxy for smallest spacing */
    --spacing-sm: {font_suggestions['font_size_scale'].get('body', 16)}px;
    --spacing-md: {font_suggestions['font_size_scale'].get('h6', 18)}px;
    --spacing-lg: {font_suggestions['font_size_scale'].get('h5', 22)}px;
    --spacing-xl: {font_suggestions['font_size_scale'].get('h4', 26)}px;
    --spacing-2xl: {font_suggestions['font_size_scale'].get('h3', 32)}px;

    /* Dynamic Border Styles (Conceptual - requires custom Tailwind setup or direct CSS) */
    --border-style-default: solid;
    --border-width-default: 1px;
    --border-color-default: var(--color-secondary);

    /* Dynamic Shadow Styles (Conceptual - requires custom Tailwind setup or direct CSS) */
    --shadow-default: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06); /* shadow-md */
    --shadow-subtle: 0 1px 2px 0 rgba(0, 0, 0, 0.05); /* shadow-sm */
    --shadow-prominent: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* shadow-xl */
    --shadow-bold: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04); /* shadow-2xl */

    /* Dynamic Background Patterns (Conceptual - for complex patterns, use images or SVG) */
    --bg-pattern-url: none; /* Can be set to url('...') for complex patterns */
    --bg-pattern-repeat: no-repeat;
    --bg-pattern-position: center;
    --bg-pattern-opacity: 1;

    /* Transitions (for consistency) */
    --transition-duration: 300ms;
    --transition-timing-function: ease-in-out;
}}

/* Apply CSS variables to common elements for consistent theming */
body {{
    background-color: var(--color-background-light);
    color: var(--color-text-dark);
    font-family: var(--font-body);
    font-size: var(--font-size-body);
    line-height: var(--line-height-body);
    letter-spacing: var(--letter-spacing-body);
}}

h1, h2, h3, h4, h5, h6 {{
    font-family: var(--font-heading);
    line-height: var(--line-height-heading);
    letter-spacing: var(--letter-spacing-heading);
    color: var(--color-primary); /* Headings often use primary color */
}}

h1 {{ font-size: var(--font-size-h1); }}
h2 {{ font-size: var(--font-size-h2); }}
h3 {{ font-size: var(--font-size-h3); }}
h4 {{ font-size: var(--font-size-h4); }}
h5 {{ font-size: var(--font-size-h5); }}
h6 {{ font-size: var(--font-size-h6); }}

small {{ font-size: var(--font-size-small); }}
.caption {{ font-size: var(--font-size-caption); }} /* Custom class for caption */
.display-text {{ font-size: var(--font-size-display); }} /* Custom class for display text */

/* Example of how dynamic border styles could be applied */
.card-border {{
    border-style: var(--border-style-default);
    border-width: var(--border-width-default);
    border-color: var(--border-color-default);
}}

/* Example of how dynamic shadows could be applied */
.card-shadow {{
    box-shadow: var(--shadow-default);
}}

/* Example of how dynamic background patterns could be applied */
.dynamic-bg {{
    background-image: var(--bg-pattern-url);
    background-repeat: var(--bg-pattern-repeat);
    background-position: var(--bg-pattern-position);
    opacity: var(--bg-pattern-opacity);
}}

/*
 * Accessibility Note:
 * Ensure sufficient contrast ratios for text and interactive elements.
 * Use semantic HTML5 elements (header, main, section, footer, nav, etc.).
 * Provide clear focus indicators for keyboard navigation.
 * Add ARIA attributes where standard HTML semantics are insufficient.
 */
"""
    theme_css_path = os.path.join(output_dir, "theme.css")
    with open(theme_css_path, "w", encoding="utf-8") as f:
        f.write(theme_css_content)

    # --- 2. Generate tailwind.config.js ---
    tailwind_config_content = f"""
// tailwind.config.js
/** @type {{{{import('tailwindcss').Config}}}} */
const colors = require('./theme.css.js'); // Import generated colors from a helper JS file
const fontSizes = require('./theme.css.js').fontSizes; // Import font sizes
const spacing = require('./theme.css.js').spacing; // Import spacing

module.exports = {{{{
  content: [
    "./*.html", // Adjust according to your project structure
    "./src/**/*.{{{{html,js,ts,jsx,tsx}}}}", // Corrected: double curly braces for the literal glob pattern
  ],
  theme: {{{{
    extend: {{{{
      // Dynamically generated colors
      colors: {{{{
        primary: 'var(--color-primary)',
        secondary: 'var(--color-secondary)',
        accent: 'var(--color-accent)',
        textDark: 'var(--color-text-dark)',
        textLight: 'var(--color-text-light)',
        backgroundLight: 'var(--color-background-light)',
        backgroundDark: 'var(--color-background-dark)',
        surface: 'var(--color-surface)',
      }}}},
      // Dynamically generated font families
      fontFamily: {{{{
        heading: ['var(--font-heading)', 'sans-serif'],
        body: ['var(--font-body)', 'sans-serif'],
      }}}},
      // Dynamically generated font sizes
      fontSize: {{{{
        'h1': 'var(--font-size-h1)',
        'h2': 'var(--font-size-h2)',
        'h3': 'var(--font-size-h3)',
        'h4': 'var(--font-size-h4)',
        'h5': 'var(--font-size-h5)',
        'h6': 'var(--font-size-h6)',
        'body': 'var(--font-size-body)',
        'sm': 'var(--font-size-small)', // Use 'sm' for small
        'caption': 'var(--font-size-caption)', // New custom size
        'display': 'var(--font-size-display)', // New custom size
      }}}},
      // Dynamically generated spacing units
      spacing: {{{{
        'xs': 'var(--spacing-xs)',
        'sm': 'var(--spacing-sm)',
        'md': 'var(--spacing-md)',
        'lg': 'var(--spacing-lg)',
        'xl': 'var(--spacing-xl)',
        '2xl': 'var(--spacing-2xl)',
      }}}},
      // Dynamically generated line heights
      lineHeight: {{{{
        'tight': '1.25',
        'normal': '1.5',
        'relaxed': '1.625',
        'loose': '2',
      }}}},
      // Dynamically generated letter spacing
      letterSpacing: {{{{
        'tight': '-0.025em',
        'normal': '0em',
        'wide': '0.025em',
        'wider': '0.05em',
        'widest': '0.1em',
      }}}},
      // Dynamic shadows (conceptual, can be extended with actual values if needed)
      boxShadow: {{{{
        'default': 'var(--shadow-default)',
        'subtle': 'var(--shadow-subtle)',
        'prominent': 'var(--shadow-prominent)',
        'bold': 'var(--shadow-bold)',
      }}}},
      // Dynamic borders (conceptual, can be extended with actual values if needed)
      borderColor: {{{{
        'default': 'var(--border-color-default)',
      }}}},
      borderWidth: {{{{
        'default': '1px',
      }}}},
      borderStyle: {{{{
        'default': 'var(--border-style-default)',
      }}}},
      // Dynamic transitions (conceptual)
      transitionDuration: {{{{
        'default': '300ms',
      }}}},
      transitionTimingFunction: {{{{
        'default': 'ease-in-out',
      }}}},
    }}}},
  }}}},
  plugins: [],
}}}}
"""
    # Create a dummy JS file to hold the values for tailwind.config.js to import
    # This is a workaround as Tailwind doesn't directly read CSS variables in its config
    # without a PostCSS plugin or similar. For demonstration, we'll output the values.
    # In a real setup, you'd use a PostCSS plugin like `postcss-custom-properties`
    # or directly inject these into the Tailwind config.
    theme_css_js_content = f"""
// theme.css.js - Helper for Tailwind config to read dynamic values
module.exports = {{{{
    colors: {{{{
        primary: '{colors.get('primary', '#1A73E8')}',
        secondary: '{colors.get('secondary', '#F0F0F0')}',
        accent: '{colors.get('accent', '#EA4335')}',
        text_dark: '{colors.get('text_dark', '#333333')}',
        text_light: '{colors.get('text_light', '#FFFFFF')}',
        background_light: '{colors.get('background_light', '#F9FAFB')}',
        background_dark: '{colors.get('background_dark', '#1F2937')}',
        surface: '{colors.get('surface', '#FFFFFF')}',
    }}}},
    fontSizes: {{{{
        h1: '{font_size_scale.get('h1', 48)}px',
        h2: '{font_size_scale.get('h2', 40)}px',
        h3: '{font_size_scale.get('h3', 32)}px',
        h4: '{font_size_scale.get('h4', 26)}px',
        h5: '{font_size_scale.get('h5', 22)}px',
        h6: '{font_size_scale.get('h6', 18)}px',
        body: '{font_size_scale.get('body', 16)}px',
        small: '{font_size_scale.get('small', 14)}px',
        caption: '{font_size_scale.get('caption', 12)}px',
        display: '{font_size_scale.get('display', 64)}px',
    }}}},
    spacing: {{{{
        xs: '{font_suggestions['font_size_scale'].get('small', 14) / 16 * 16}px',
        sm: '{font_suggestions['font_size_scale'].get('body', 16)}px',
        md: '{font_suggestions['font_size_scale'].get('h6', 18)}px',
        lg: '{font_suggestions['font_size_scale'].get('h5', 22)}px',
        xl: '{font_suggestions['font_size_scale'].get('h4', 26)}px',
        '2xl': '{font_suggestions['font_size_scale'].get('h3', 32)}px',
    }}}},
    lineHeights: {{{{
        tight: '1.25',
        normal: '1.5',
        relaxed: '1.625',
        loose: '2',
    }}}},
    letterSpacings: {{{{
        tight: '-0.025em',
        normal: '0em',
        wide: '0.025em',
        wider: '0.05em',
        widest: '0.1em',
    }}}},
    boxShadows: {{{{
        default: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',
        subtle: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
        prominent: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
        bold: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
    }}}},
    borderStyles: {{{{
        default: 'solid',
    }}}},
    borderWidths: {{{{
        default: '1px',
    }}}},
    borderColors: {{{{
        default: 'var(--color-secondary)',
    }}}},
    transitionDurations: {{{{
        default: '300ms',
    }}}},
    transitionTimingFunctions: {{{{
        default: 'ease-in-out',
    }}}},
}}}};
"""
    theme_css_js_path = os.path.join(output_dir, "theme.css.js")
    with open(theme_css_js_path, "w", encoding="utf-8") as f:
        f.write(theme_css_js_content)

    tailwind_config_path = os.path.join(output_dir, "tailwind.config.js")
    with open(tailwind_config_path, "w", encoding="utf-8") as f:
        f.write(tailwind_config_content)

    # --- 3. Generate INTEGRATION_GUIDE.md ---
    integration_guide_content = f"""
# Smart Theming Engine - Integration Guide

This guide explains how to integrate the generated theme files into your web project.

## 1. Generated Files Overview

You will find the following files in your output directory (`{output_dir}`):

* `theme.css`: Contains custom CSS variables for colors, fonts, spacing, and typographic recommendations.
* `tailwind.config.js`: Configures Tailwind CSS to use your dynamically generated theme.
* `theme.css.js`: A helper JavaScript file that exports values for `tailwind.config.js`.
* `themed-layout.html`: A sample HTML layout demonstrating the applied theme.
* `suggested-components.txt`: A list of recommended JavaScript components with rationales.

## 2. Integrating `theme.css`

Include `theme.css` in your HTML `<head>` after any Tailwind CSS imports (if you're using a CDN) or ensure it's processed by your build tool if you're using PostCSS.

```html
<head>
    <!-- Your other meta tags -->
    <link href="[https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css](https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css)" rel="stylesheet">
    <link href="./theme.css" rel="stylesheet">
    <!-- Or if using a build process, ensure theme.css is imported/processed -->
</head>
```

You can then use the CSS variables directly in your CSS or inline styles:

```css
.my-element {{
    background-color: var(--color-primary);
    font-family: var(--font-body);
    font-size: var(--font-size-body);
    line-height: var(--line-height-body);
    letter-spacing: var(--letter-spacing-body);
}}
```

## 3. Integrating `tailwind.config.js`

Place `tailwind.config.js` and `theme.css.js` in the root of your project or in a designated configuration folder. Ensure your Tailwind CSS build process (e.g., via `npx tailwindcss -i ./input.css -o ./output.css --watch`) picks up this configuration.

The `tailwind.config.js` extends Tailwind's default theme with your custom colors, fonts, spacing, and typographic utilities.

**Example Usage in HTML (with Tailwind classes):**

```html
<h1 class="text-h1 font-heading text-primary leading-heading tracking-heading">
    Your Themed Heading
</h1>
<p class="text-body font-body text-textDark leading-body tracking-body">
    This is your themed body text.
</p>
<button class="bg-accent text-white px-4 py-2 rounded-lg shadow-default">
    Call to Action
</button>
```

**Note on Dynamic Styles (Borders, Shadows, Backgrounds):**

For dynamic border styles, shadows, and background patterns, you might need to create custom Tailwind plugins or use direct CSS with the provided CSS variables, as Tailwind's default utility classes are not directly dynamic in the same way. The `themed-layout.html` provides examples of how these might be applied using the generated CSS variables.

## 4. Implementing JavaScript Components

The `suggested-components.txt` file lists interactive JavaScript components tailored to your theme. Here's how you might approach implementing them:

* **Modals/Dialogs**: Use pure JavaScript or a lightweight library like [Micromodal.js](https://micromodal.vercel.app/).
* **Accordions/Collapses**: Can be built with pure JavaScript (e.g., using `details`/`summary` elements or custom toggles) or a small library.
* **Image Carousels/Sliders**: Popular choices include [Swiper.js](https://swiperjs.com/) or [Slick Carousel](https://kenwheeler.github.io/slick/).
* **Interactive Charts/Graphs**: For complex data visualizations, consider [D3.js](https://d3js.org/) (powerful, but steeper learning curve) or [Chart.js](https://www.chartjs.org/) (simpler, good for common charts).
* **Advanced Search**: Libraries like [Algolia](https://www.algolia.com/) (for backend search) or [Fuse.js](https://fusejs.io/) (for client-side fuzzy search) can be integrated.
* **Interactive Backgrounds/Canvas Animations**: For advanced effects, [Three.js](https://threejs.org/) (for 3D) or [P5.js](https://p5js.org/) (for 2D generative art) are excellent choices.
* **Lottie Animations**: Use the [Lottie-web](https://airbnb.io/lottie/web/web.html) library to integrate JSON-based animations.
* **Tooltips/Popovers**: Libraries like [Popper.js](https://popper.js.org/) or [Tippy.js](https://atomiks.github.io/tippyjs/) provide robust solutions.
* **Infinite Scroll/Load More**: Can be implemented using the [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) for efficient loading.

**Accessibility Note for JS Components:**

* Ensure all interactive components are fully keyboard navigable.
* Use appropriate ARIA roles and attributes (e.g., `aria-expanded`, `aria-controls`, `role="dialog"`, `aria-modal="true"`) to convey state and semantics to assistive technologies.
* Provide clear focus management, especially for modals and interactive elements.

## 5. Performance Considerations

* **Font Loading**: For optimal performance, consider preloading your chosen Google Fonts using `<link rel="preload" as="font" crossorigin>` in your HTML `<head>`.
* **Image Optimization**: Ensure all images used in your project are optimized for web (compressed, correctly sized, using modern formats like WebP).
* **JavaScript Bundling**: If using multiple JS components or libraries, bundle and minify your JavaScript files to reduce load times.
* **CSS Purging**: Use Tailwind's JIT mode or PurgeCSS to remove unused CSS, keeping your stylesheet lean.

## 6. Further Customization

The generated theme provides a strong foundation. You can further customize it by:

* Modifying the `theme.css` variables.
* Extending `tailwind.config.js` with more custom utilities or plugins.
* Adding custom CSS for unique design elements not covered by Tailwind.

---
*Generated by Smart Theming Engine - {datetime.now().year}*
"""
    integration_guide_path = os.path.join(output_dir, "INTEGRATION_GUIDE.md")
    with open(integration_guide_path, "w", encoding="utf-8") as f:
        f.write(integration_guide_content)

    return {
        "tailwind_config_path": tailwind_config_path,
        "theme_css_path": theme_css_path,
        "integration_guide_path": integration_guide_path,
        "theme_css_js_path": theme_css_js_path # Return path to helper JS file
    }

if __name__ == "__main__":
    print("--- Testing Theme Builder (Peak Tech) ---")

    # Dummy data mimicking outputs from other modules
    dummy_palette_data = {
        "palette": {
            "primary": "#1A73E8",
            "secondary": "#F0F0F0",
            "accent": "#EA4335",
            "text_dark": "#333333",
            "text_light": "#FFFFFF",
            "background_light": "#F9FAFB",
            "background_dark": "#1F2937",
            "surface": "#FFFFFF",
        },
        "accessibility_suggestions": [],
        "color_harmony_score": {"score": 8.5, "explanation": "High harmony"}
    }

    dummy_font_suggestions = {
        "heading_font": "Montserrat",
        "body_font": "Lato",
        "font_size_scale": {
            "body": 18, "small": 15, "caption": 13, "h6": 20, "h5": 24, "h4": 30, "h3": 38, "h2": 48, "h1": 60, "display": 80
        },
        "typographic_recommendations": {
            "line_height": "relaxed",
            "letter_spacing": "normal"
        }
    }

    dummy_brand_guidelines = {
        "layoutPreference": "modern",
        "designPrinciples": ["dynamic", "expressive"]
    }

    output_test_dir = "outputs/test_theme_builder"
    print(f"Generating theme files in: {output_test_dir}")
    generated_files = build_theme_files(
        palette_data=dummy_palette_data,
        font_suggestions=dummy_font_suggestions,
        brand_guidelines=dummy_brand_guidelines,
        output_dir=output_test_dir
    )

    # --- Extract variables for assertions from dummy data ---
    # This is the fix: define these variables in the global scope of the test block
    font_size_scale = dummy_font_suggestions["font_size_scale"]
    typographic_recs = dummy_font_suggestions["typographic_recommendations"]
    design_principles_for_test = set() # Use a different name to avoid confusion with function scope
    if "designPrinciples" in dummy_brand_guidelines and isinstance(dummy_brand_guidelines["designPrinciples"], list):
        for principle in dummy_brand_guidelines["designPrinciples"]:
            design_principles_for_test.add(principle.strip().lower())
    # --- End of fix ---


    print("\nGenerated Files:")
    for key, path in generated_files.items():
        print(f"- {key}: {path}")
        if os.path.exists(path):
            print(f"  (File exists and created successfully)")
        else:
            print(f"  (ERROR: File NOT found!)")

    # Verify content (optional, but good for robust testing)
    with open(generated_files['theme_css_path'], 'r', encoding='utf-8') as f:
        css_content = f.read()
        print("\n--- Generated CSS Content for Debugging ---")
        print(css_content)
        print("--- End Generated CSS Content ---")

        # Assertion 1: Font size H1
        expected_h1_font_size = f"--font-size-h1: {font_size_scale.get('h1', 48)}px;"
        print(f"DEBUG: Checking for H1 font size: '{expected_h1_font_size}'")
        assert expected_h1_font_size in css_content, f"H1 font size assertion failed. Expected '{expected_h1_font_size}' not found."
        print("Verified theme.css H1 font size.")

        # Assertion 2: Body line-height
        expected_body_line_height = f"--line-height-body: var(--lh-{typographic_recs.get('line_height', 'normal')});"
        print(f"DEBUG: Checking for body line-height: '{expected_body_line_height}'")
        assert expected_body_line_height in css_content, f"Body line-height assertion failed. Expected '{expected_body_line_height}' not found."
        print("Verified theme.css body line-height.")

        # Assertion 3: Body letter-spacing
        expected_body_letter_spacing = f"--letter-spacing-body: var(--ls-{typographic_recs.get('letter_spacing', 'normal')});"
        print(f"DEBUG: Checking for body letter-spacing: '{expected_body_letter_spacing}'")
        assert expected_body_letter_spacing in css_content, f"Body letter-spacing assertion failed. Expected '{expected_body_letter_spacing}' not found."
        print("Verified theme.css body letter-spacing.")

        # Assertion 4: Design Principles
        # Need to handle potential order difference in set to string conversion
        design_principles_str = ', '.join(sorted(list(design_principles_for_test))) # Use the test-scoped variable
        # The check needs to be flexible for the order of principles in the string
        assert f"Design Principles Applied: {design_principles_str}" in css_content or \
               f"Design Principles Applied: {', '.join(design_principles_for_test) if design_principles_for_test else 'None (inferred)'}" in css_content, \
               f"Design principles assertion failed. Expected to find '{design_principles_str}' or 'None (inferred)'"
        print("Verified theme.css design principles.")

    with open(generated_files['tailwind_config_path'], 'r', encoding='utf-8') as f:
        tailwind_content = f.read()
        assert "fontFamily: {{" in tailwind_content # Check for double braces
        assert "heading: ['var(--font-heading)', 'sans-serif']," in tailwind_content
        assert "'h1': 'var(--font-size-h1)'," in tailwind_content
        assert "'caption': 'var(--font-size-caption)'," in tailwind_content
        assert "'display': 'var(--font-size-display)'," in tailwind_content
        assert "lineHeight: {{" in tailwind_content # Check for double braces
        assert "letterSpacing: {{" in tailwind_content # Check for double braces
        print("Verified tailwind.config.js content.")

    with open(generated_files['integration_guide_path'], 'r', encoding='utf-8') as f:
        guide_content = f.read()
        assert "## 4. Implementing JavaScript Components" in guide_content
        assert "Accessibility Note for JS Components:" in guide_content
        print("Verified INTEGRATION_GUIDE.md content.")

    print("\nTheme Builder testing complete.")
